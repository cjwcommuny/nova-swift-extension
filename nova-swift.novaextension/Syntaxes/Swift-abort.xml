<?xml version="1.0" encoding="UTF-8"?>
<syntax name="swift">
    <meta>
        <name>Swift</name>
        <type>compiled</type>
        <preferred-file-extension>swift</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/swift" />
    </meta>

    <detectors>
        <extension priority="1.0">swift</extension>
    </detectors>

    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>

    <comments>
        <multiline>
            <starts-with>
                <expression>/\*</expression>
            </starts-with>
            <ends-with>
                <expression>\*/</expression>
            </ends-with>
        </multiline>
        <single>
            <expression>//</expression>
        </single>
    </comments>

    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&lt;" close="&gt;" />
    </brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&lt;" close="&gt;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>

<!--    <symbols redefinition="within-construct">-->
<!--        <local scope="within-construct" />-->

<!--        <documentation mode="before" match-multiple="comment" />-->
<!--        <documentation mode="after" match-multiple="comment" />-->
<!--    </symbols>-->

    <scopes>
<!--        <include syntax="self" collection="values" />-->
        <include syntax="self" collection="comments" />
<!--        <include syntax="self" collection="imports" />-->
        <include syntax="self" collection="definitions" />
<!--        <include syntax="self" collection="attributes"/>-->
<!--        <include syntax="self" collection="identifiers" />-->
<!--        <include syntax="self" collection="keywords" />-->
    </scopes>

    <collections>

        <collection name="values">
            <include syntax="self" collection="strings" />
            <scope name="swift.value.null">
                <strings>
                    <string>nil</string>
                </strings>
            </scope>
            <scope name="swift.value.boolean">
                <strings>
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <scope name="swift.value.number.hex">
                <expression>\b0x[a-fA-F0-9]+\b</expression>
            </scope>
            <scope name="swift.value.number">
                <expression>\b\-?(?:\d+(?:\.\d)?|(?:\.\d+))\b</expression>
            </scope>

        </collection>

        <collection name="comments">
            <scope name="swift.comment.single" spell-check="true">
                <expression>///?(.*)$</expression>
                <capture number="1" name="swift.comment.content" />
            </scope>
            <scope name="swift.comment.block" spell-check="true">
                <starts-with>
                    <expression>/\*\*?</expression>
                </starts-with>
                <ends-with>
                    <expression>\*/</expression>
                </ends-with>
            </scope>
        </collection>


        <collection name="imports">
            <scope name="swift.import">
                <starts-with>
                    <expression>\b(import)\b</expression>
                    <capture number="1" name="swift.keyword" />
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                </ends-with>
            </scope>
        </collection>

        <collection name="strings">
            <scope name="swift.string.multiline">
                <starts-with>
                    <expression>&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
            <scope name="swift.string.singleline">
                <expression>&quot;(?:[^&quot;\\]|\\.)*(?:&quot;|$)</expression>
            </scope>
        </collection>

        <collection name="generic-parameter-clause">
            <scope name="rust.generic.type">
                <starts-with>
                    <expression>&lt;</expression>
                    <capture number="0" name="swift.bracket.generic"/>
                </starts-with>
                <ends-with>
                    <expression>&gt;</expression>
                    <capture number="0" name="swift.bracket.generic"/>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="types"/>
                    <scope name="swift.separator">
                        <expression>,</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <collection name="parameter-clause">
            <scope name="swift.parameter_clause">
                <starts-with>
                    <expression>\(</expression>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                </ends-with>
            </scope>
        </collection>

<!--        <collection name="function-signature">-->
<!--            <scope name="swift.function.signature" anchored="true">-->

<!--            </scope>-->
<!--        </collection>-->
<!--        <collection name="identifier">-->

<!--        </collection>-->

        <collection name="type-annotation">
            <scope name="swift.type-annotation">
                <starts-with>
                    <expression>\:</expression>
                </starts-with>
                <ends-with/>
                <subscopes anchored="true">
                    <include syntax="self" collection="attributes" optional="true"/>
                    <scope name="swift.keyword" optional="true">
                        <expression>inout</expression>
                    </scope>
                    <include syntax="self" collection="types"/>
                </subscopes>
            </scope>
        </collection>

        <collection name="tuple-type-element">
            <scope name="swift.type.tuple-element">
                <starts-with>
                    <expression>
                        (?:
                            ([a-zA-Z_][a-zA-Z0-9_]*)
                            \s*
                            \:
                        )?
                    </expression>
                    <capture number="1" name="swift.identifier.argument"/>
                </starts-with>
                <ends-with/>
                <subscopes anchored="true">
                    <include syntax="self" collection="attributes" optional="true"/>
                    <scope name="swift.keyword" optional="true">
                        <expression>inout</expression>
                    </scope>
                    <include syntax="self" collection="types"/>
                </subscopes>
            </scope>
        </collection>

        <collection name="function-type-argument-clause">
            <scope name="swift.function-type-argument-clause">
                <starts-with>
                    <expression>\(</expression>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                </ends-with>
                <subscopes>
                    <scope name="swift.keyword">
                        <expression>inout</expression>
                    </scope>
                    <include syntax="self" collection="attributes"/>
                    <scope name="swift.punctuation">
                        <expression>,</expression>
                    </scope>
                    <scope name="swift.function-type-argument-label">
                        <starts-with>
                            <expression>
                                (?:
                                    ([a-zA-Z_][a-zA-Z0-9_]*)
                                    \s*
                                    \:
                                )?
                            </expression>
                            <capture number="1" name="swift.identifier.argument"/>
                        </starts-with>
                        <ends-with/>
                        <subscopes anchored="true">
                            <include syntax="self" collection="attributes" optional="true"/>
                            <scope name="swift.keyword" optional="true">
                                <expression>inout</expression>
                            </scope>
                            <include syntax="self" collection="types"/>
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <collection name="types">
            <scope name="swift.type.any">
                <expression>
                    (Any)
                    (?:
                        (?:
                            \s*
                            \?|! <!-- (implicitly unwrapped) optional type -->
                        )?
                        (?:
                            \s*
                            \.
                            \s*
                            (Type|Protocol) <!-- Metatype Type -->
                        )?
                    )*
                </expression>
                <capture number="1" name="swift.keyword"/>
                <capture number="2" name="swift.identifier.property"/>
            </scope>

            <scope name="swift.type.self">
                <expression>
                    (Self)
                    (?:
                        (?:
                            \s*
                            \?|! <!-- (implicitly unwrapped) optional type -->
                        )?
                        (?:
                            \s*
                            \.
                            \s*
                            (Type|Protocol) <!-- Metatype Type -->
                        )?
                    )*
                </expression>
                <capture number="1" name="swift.keyword"/>
                <capture number="2" name="swift.identifier.property"/>
            </scope>

            <scope name="swift.type.protocol-composition">
                <expression>
                    ([a-zA-Z_][a-zA-Z0-9_]*)
                    \s*
                    (?:
                        &amp;
                        \s*
                        ([a-zA-Z_][a-zA-Z0-9_]*)
                    )+
                </expression>
                <capture number="1" name="swift.identifier.type"/>
                <capture number="2" name="swift.identifier.type"/>
            </scope>

            <scope name="swift.identifier.type">
                <expression>
                    ([a-zA-Z_][a-zA-Z0-9_]*)
                    (?:
                        (?:
                            \s*
                            \?|! <!-- (implicitly unwrapped) optional type -->
                        )?
                        (?:
                            \s*
                            \.
                            \s*
                            (Type|Protocol) <!-- Metatype Type -->
                        )?
                    )*
                </expression>
                <capture number="1" name="swift.identifier.type"/>
                <capture number="2" name="swift.identifier.property"/>
            </scope>

            <!-- NOTE: swift.dictionary.type should be placed before swift.array.type -->
            <scope name="swift.type.dictionary">
                <starts-with>
                    <expression>\[</expression>
                </starts-with>
                <ends-with>
                    <expression>
                        \]
                        (?:
                            (?:
                                \s*
                                \?|! <!-- (implicitly unwrapped) optional type -->
                            )?
                            (?:
                                \s*
                                \.
                                \s*
                                (Type|Protocol) <!-- Metatype Type -->
                            )?
                        )*
                    </expression>
                    <capture number="1" name="swift.identifier.property"/>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="types"/>
                    <scope name="swift.colon">
                        <expression>:</expression>
                    </scope>
                    <include syntax="self" collection="types"/>
                </subscopes>
            </scope>

            <scope name="swift.type.array">
                <starts-with>
                    <expression>\[</expression>
                </starts-with>
                <ends-with>
                    <expression>
                        \]
                        (?:
                            (?:
                                \s*
                                \?|! <!-- (implicitly unwrapped) optional type -->
                            )?
                            (?:
                                \s*
                                \.
                                \s*
                                (Type|Protocol) <!-- Metatype Type -->
                            )?
                        )*
                    </expression>
                    <capture number="1" name="swift.identifier.property"/>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="types"/>
                </subscopes>
            </scope>

            <scope name="swift.type.opaque">
                <starts-with>
                    <expression>(some)</expression>
                    <capture number="1" name="swift.keyword"/>
                </starts-with>
                <ends-with/>
                <subscopes anchored="true">
                    <include syntax="self" collection="types"/>
                </subscopes>
            </scope>

<!--            <scope name="swift.type.tuple">-->
<!--                <starts-with>-->
<!--                    <expression>\(</expression>-->
<!--                </starts-with>-->
<!--                <ends-with>-->
<!--                    <expression>-->
<!--                        \)-->
<!--                        (?:-->
<!--                        (?:-->
<!--                        \s*-->
<!--                        \?|! &lt;!&ndash; (implicitly unwrapped) optional type &ndash;&gt;-->
<!--                        )?-->
<!--                        (?!-->
<!--                        \s*-->
<!--                        -&gt;-->
<!--                        )-->
<!--                        (?:-->
<!--                        \s*-->
<!--                        \.-->
<!--                        \s*-->
<!--                        (Type|Protocol) &lt;!&ndash; Metatype Type &ndash;&gt;-->
<!--                        )?-->
<!--                        )*-->

<!--                    </expression>-->
<!--                    <capture number="1" name="swift.keyword"/>-->
<!--                </ends-with>-->
<!--                <subscopes>-->
<!--                    <include syntax="self" collection="tuple-type-element" repeat="true"/>-->
<!--                    <scope name="swift.punctuation">-->
<!--                        <expression>,</expression>-->
<!--                    </scope>-->
<!--                </subscopes>-->
<!--            </scope>-->

            <!-- merge function and tuple type -->
            <scope name="swift.function-type">
                <starts-with>
                    <expression>(?=(\(|@))</expression> <!-- lookahead ( or @ -->
                </starts-with>
                <ends-with/>
                <subscopes>
                    <include syntax="self" collection="function-attributes" optional="true"/>
                    <include syntax="self" collection="function-type-argument-clause"/>
                    <scope name="swift.keyword" optional="true" repeat="true">
                        <expression>throws</expression>
                    </scope>
                    <scope name="swift.operator" optional="true" repeat="true">
                        <expression>-&gt;</expression>
                    </scope>
                    <include syntax="self" collection="types" optional="true" repeat="true"/>
                </subscopes>
            </scope>


        </collection>

        <collection name="punctuations">
            <scope name="swift.punctuation">
                <expression>,</expression>
            </scope>
        </collection>

        <collection name="attributes-balanced-token">
            <scope name="swift.attributes-balanced-token-1">
                <starts-with>
                    <expression>\(</expression>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="attributes-balanced-tokens"/>
                </subscopes>
            </scope>
            <scope name="swift.attributes-balanced-token-2">
                <starts-with>
                    <expression>\[</expression>
                </starts-with>
                <ends-with>
                    <expression>\]</expression>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="attributes-balanced-tokens"/>
                </subscopes>
            </scope>
            <scope name="swift.attributes-balanced-token-3">
                <starts-with>
                    <expression>\{</expression>
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="attributes-balanced-tokens"/>
                </subscopes>
            </scope>
            <scope name="swift.attributes-balanced-token-4">
                <expression>[a-zA-Z_][a-zA-Z0-9_]*</expression>
<!--                TODO-->
            </scope>
            <!--                TODO-->
        </collection>

        <collection name="function-attributes">
            <scope name="swift.function-attribute">
                <expression>(@)([a-zA-Z_][a-zA-Z0-9_]*)</expression>
                <capture number="1" name="swift.identifier.keyword"/>
                <capture number="2" name="swift.identifier.keyword"/>
            </scope>
        </collection>

        <collection name="attributes">
            <scope name="swift.attribute">
                <starts-with>
                    <expression>(@)</expression>
                    <capture number="1" name="swift.identifier.keyword"/>
                </starts-with>
                <ends-with/>
                <subscopes anchored="true">
                    <scope name="swift.identifier.keyword">
                        <expression>[a-zA-Z_][a-zA-Z0-9_]*</expression>
                    </scope>
                    <scope name="swift.attribute-argument-clause" optional="true">
                        <starts-with>
                            <expression>\(</expression>
                        </starts-with>
                        <ends-with>
                            <expression>\)</expression>
                        </ends-with>
                        <subscopes anchored="true">
                            <include syntax="self" collection="attributes-balanced-token" optional="true" repeat="true"/>
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <collection name="code-block">
            <scope name="swift.code_block">
                <starts-with>
                    <expression>\{</expression>
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                </ends-with>
            </scope>
        </collection>

        <collection name="definitions">
            <scope name="swift.definition.function">
                <symbol type="function" />
                <starts-with>
                    <!-- NOTES: here we don't consider attributes, but include it in top scopes-->
                    <expression>
                        \b
                        (?:(convenience|dynamic|final|infix|lazy|optional|override|postfix|prefix|required|static|unowned|weak|public|private|fileprivate|internal|open|mutating|nonmutating|nonisolated)\s)*
                        (func)
                        \s+
                        ([a-zA-Z_][a-zA-Z0-9_]*)
                        \b
                    </expression>
                    <capture number="1" name="swift.keyword"/>
                    <capture number="2" name="swift.keyword"/>
                    <capture number="3" name="swift.identifier.function.name"/>
                </starts-with>
                <ends-with/>
                <subscopes anchored="true">
<!--                    <include syntax="self" collection="generic-parameter-clause" optional="true"/>-->
                    <include syntax="self" collection="parameter-clause"/>
                    <scope name="swift.keyword" optional="true" repeat="true">
                        <expression>(async|throws|rethrows)</expression>
                    </scope>
                    <scope name="swift.function_result" optional="true">
                        <starts-with>
                            <expression>(-&gt;)</expression>
                            <capture number="1" name="swift.operator"/>
                        </starts-with>
                        <ends-with/>
                        <subscopes anchored="true">
<!--                            TODO: attributes-->
                            <include syntax="self" collection="types"/>
                        </subscopes>
                    </scope>
                    <include syntax="self" collection="code-block"/>
                </subscopes>
            </scope>
        </collection>

        <collection name="keywords">
            <scope name="swift.keyword">
                <strings>
                    <!-- declarations -->
                    <string>associatedtype</string>
                    <string>class</string>
                    <string>deinit</string>
                    <string>enum</string>
                    <string>extension</string>
                    <string>fileprivate</string>
                    <string>func</string>
                    <string>import</string>
                    <string>init</string>
                    <string>inout</string>
                    <string>internal</string>
                    <string>let</string>
                    <string>open</string>
                    <string>operator</string>
                    <string>private</string>
                    <string>protocol</string>
                    <string>public</string>
                    <string>rethrows</string>
                    <string>static</string>
                    <string>struct</string>
                    <string>subscript</string>
                    <string>typealias</string>
                    <string>var</string>
                    <!-- statements -->
                    <string>break</string>
                    <string>case</string>
                    <string>continue</string>
                    <string>default</string>
                    <string>defer</string>
                    <string>do</string>
                    <string>else</string>
                    <string>fallthrough</string>
                    <string>for</string>
                    <string>guard</string>
                    <string>if</string>
                    <string>in</string>
                    <string>repeat</string>
                    <string>return</string>
                    <string>switch</string>
                    <string>where</string>
                    <string>while</string>
                    <!-- expressions and types -->
                    <string>as</string>
                    <string>Any</string>
                    <string>catch</string>
                    <string>false</string>
                    <string>is</string>
                    <string>nil</string>
                    <string>super</string>
                    <string>self</string>
                    <string>Self</string>
                    <string>throw</string>
                    <string>throws</string>
                    <string>true</string>
                    <string>try</string>
                    <!-- patterns -->
                    <string>_</string>
                    <!-- context specific -->
                    <string>associativity</string>
                    <string>convenience</string>
                    <string>dynamic</string>
                    <string>didSet</string>
                    <string>final</string>
                    <string>get</string>
                    <string>infix</string>
                    <string>indirect</string>
                    <string>lazy</string>
                    <string>left</string>
                    <string>mutating</string>
                    <string>none</string>
                    <string>nonmutating</string>
                    <string>optional</string>
                    <string>override</string>
                    <string>postfix</string>
                    <string>precedence</string>
                    <string>prefix</string>
                    <string>Protocol</string>
                    <string>required</string>
                    <string>right</string>
                    <string>set</string>
                    <string>Type</string>
                    <string>unowned</string>
                    <string>weak</string>
                    <string>willSet</string>
                    <string>async</string>
                </strings>
            </scope>
            <scope name="swift.keyword">
                <strings prefix="\#" word-boundary="false">
                    <string>available</string>
                    <string>colorLiteral</string>
                    <string>column</string>
                    <string>dsohandle</string>
                    <string>else</string>
                    <string>elseif</string>
                    <string>endif</string>
                    <string>error</string>
                    <string>file</string>
                    <string>fileID</string>
                    <string>fileLiteral</string>
                    <string>filePath</string>
                    <string>function</string>
                    <string>if</string>
                    <string>imageLiteral</string>
                    <string>line</string>
                    <string>selector</string>
                    <string>sourceLocation</string>
                    <string>warning</string>
                </strings>
            </scope>
<!--            <scope name="swift.keyword">-->
<!--                <strings prefix="\@" word-boundary="false">-->
<!--                    <string>_exported</string>-->
<!--                    <string>available</string>-->
<!--                    <string>discardableResult</string>-->
<!--                    <string>escaping</string>-->
<!--                    <string>main</string>-->
<!--                    <string>testable</string>-->
<!--                </strings>-->
<!--            </scope>-->
            <scope name="swift.identifier.type.basic">
                <strings>
                    <string>Bool</string>
                    <string>Character</string>
                    <string>Double</string>
                    <string>Float</string>
                    <string>Int</string>
                    <string>Optional</string>
                    <string>String</string>
                    <string>UInt</string>
                    <string>Void</string>
                    <string>Never</string>
                </strings>
            </scope>
        </collection>
    </collections>

</syntax>
